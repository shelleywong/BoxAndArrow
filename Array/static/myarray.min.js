var av,statusElement=document.getElementById("status"),progressElement=document.getElementById("progress"),spinnerElement=document.getElementById("spinner"),Module={preRun:[],postRun:[],print:function(){var t=document.getElementById("output");return t&&(t.value=""),function(e){1<arguments.length&&(e=Array.prototype.slice.call(arguments).join(" ")),console.log(e),t&&(t.value+=e+"\n",t.scrollTop=t.scrollHeight)}}(),printErr:function(e){1<arguments.length&&(e=Array.prototype.slice.call(arguments).join(" ")),console.error(e)},canvas:function(){var e=document.getElementById("canvas");return e.addEventListener("webglcontextlost",function(e){alert("WebGL context lost. You will need to reload the page."),e.preventDefault()},!1),e}(),setStatus:function(e){var t,r;Module.setStatus.last||(Module.setStatus.last={time:Date.now(),text:""}),e!==Module.setStatus.last.text&&(t=e.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/),r=Date.now(),t&&r-Module.setStatus.last.time<30||(Module.setStatus.last.time=r,Module.setStatus.last.text=e,t?(e=t[1],progressElement.value=100*parseInt(t[2]),progressElement.max=100*parseInt(t[4]),progressElement.hidden=!1,spinnerElement.hidden=!1):(progressElement.value=null,progressElement.max=null,progressElement.hidden=!0,e||(spinnerElement.hidden=!0)),statusElement.innerHTML=e))},totalDependencies:0,monitorRunDependencies:function(e){this.totalDependencies=Math.max(this.totalDependencies,e),Module.setStatus(e?"Preparing... ("+(this.totalDependencies-e)+"/"+this.totalDependencies+")":"All downloads complete.")}};function findLargest(t,e,r){e=new Int32Array(e);buffer=Module._malloc(e.length*e.BYTES_PER_ELEMENT),Module.HEAP32.set(e,buffer>>2),array_largest=Module.cwrap("find_largest","number",["number","number"]);e=array_largest(buffer,r);Module._free(buffer),av.umsg("Find the largest value in your array: "),av.step();let a=0;av.umsg("We start at index: "+a+" with variable "+t.value(a));let l=t.value(a);t.css(a,{"background-color":"rgb(140, 35, 50)",color:"white"}),av.step();for(let e=1;e<r;e++){var n=t.value(e);av.umsg("Index "+e+": compare "+l+" with "+n),t.highlight(e),av.step(),n>l?(av.umsg(n+" is the new largest value"),t.unhighlight(e),t.css(e,{"background-color":"rgb(140, 35, 50)",color:"white"}),av.step(),t.css(a,{"background-color":"white",color:"black"}),a=e,l=t.value(a)):(av.umsg(n+" is not larger than "+l),t.unhighlight(e)),av.step()}l==e?av.umsg("Looks like your find_largest() worked as expected. The largest value is "+e):av.umsg("Hmm, something doesn't look right. Your find_largest() found "+e+" to be the largest value"),av.step(),t.css(a,{"background-color":"white",color:"black"})}function sumArray(t,e,r){e=new Int32Array(e);buffer=Module._malloc(e.length*e.BYTES_PER_ELEMENT),Module.HEAP32.set(e,buffer>>2),arraySum=Module.cwrap("calc_sum","number",["number","number"]);e=arraySum(buffer,r);Module._free(buffer),av.umsg("Find the sum of the values in your array"),av.step();let a=0;for(let e=0;e<r;e++){var l=a;t.highlight(e),a+=t.value(e),av.umsg("Current sum: "+l+" + "+t.value(e)+" = "+a),av.step(),t.unhighlight(e)}a==e?av.umsg("Looks like your C++ calc_sum() worked as expected. The sum of the array is "+e):av.umsg("Something doesn't look right. The sum should be "+a+", but your calc_sum() returned a sum of "+e)}function doubleVals(t,r,a){var e=new Int32Array(r);buffer=Module._malloc(e.length*e.BYTES_PER_ELEMENT),Module.HEAP32.set(e,buffer>>2),arrayDouble=Module.cwrap("double_vals","number",["number","number"]);var l=arrayDouble(buffer,a);printArr=Module.cwrap("print",null,["number","number"]),printArr(buffer,a);let n=[];for(let e=0;e<a;e++){var o=Module.HEAP32[l/Int32Array.BYTES_PER_ELEMENT+e];n.push(o)}Module._free(buffer);let s=av.ds.array(r,{indexed:!0});for(let e=0;e<a;e++)s.css(e,{"background-color":"rgb(160,160,160)"});let u=!0;av.umsg("Double the values your array and compare the results to the original array (in gray)"),av.step();for(let e=0;e<a;e++)t.highlight(e),av.step(),t.value(e,n[e]),t.value(e)!=r[e]+r[e]&&(u=!1),t.unhighlight(e),av.step();u?av.umsg("Looks like all values were doubled as expected."):av.umsg("Hmm, something looks off. Compare your results with the values in the original array."),av.step(),s.hide()}function rotateLeft(t,e,r){var a=new Int32Array(e);buffer=Module._malloc(a.length*a.BYTES_PER_ELEMENT),Module.HEAP32.set(a,buffer>>2),arrayRotate=Module.cwrap("rotate_left","number",["number","number"]);var l=arrayRotate(buffer,r);printArr=Module.cwrap("print",null,["number","number"]),printArr(buffer,r);let n=[];for(let e=0;e<r;e++){var o=Module.HEAP32[l/Int32Array.BYTES_PER_ELEMENT+e];n.push(o)}Module._free(buffer);let s=av.ds.array(e,{indexed:!0});for(let e=0;e<r;e++)s.css(e,{"background-color":"rgb(160,160,160)"});av.umsg("Rotate all values in the array left by 1 and compare your results to the values in the original array (in gray)"),av.step();var u=t.value(0);let i=!0;for(let e=0;e<r;e++)t.highlight(e),av.step(),t.value(e,n[e]),e<r-1?t.value(e)!=t.value(e+1)&&(i=!1):t.value(e)!=u&&(i=!1),t.unhighlight(e),av.step();i?av.umsg("Looks like all values were rotated as expected."):av.umsg("Hmm, something looks off. Compare your rotated array with the original array."),av.step(),s.hide()}function checkSorted(n,o,s){o=new Int32Array(o);buffer=Module._malloc(o.length*o.BYTES_PER_ELEMENT),Module.HEAP32.set(o,buffer>>2),arraySorted=Module.cwrap("is_sorted","boolean",["number","number"]);o=arraySorted(buffer,s);Module._free(buffer);let u=!0;if(1<s){let e=0,t=1,r=!1,a=av.pointer("i",n,{targetIndex:e}),l=av.pointer("j",n,{targetIndex:t});for(av.step();u&&!r;)n.value(e)>n.value(t)?(n.highlight(e),n.highlight(t),av.umsg(n.value(e)+" and "+n.value(t)+" are not sorted in increasing order, so the entire array is not sorted"),av.step(),n.unhighlight(e),n.unhighlight(t),u=!1):(e++,t++,t>=s?r=!0:(a.target(n,{targetIndex:e}),l.target(n,{targetIndex:t}),av.step()));o&&u?av.umsg("The array is sorted in increasing order"):o&&!u&&av.umsg("Hmm, something looks off. The array is not sorted, but your C++ is_sorted() function returned true (array sorted)"),av.step(),a.hide(),l.hide()}else av.umsg("An array of size 1 is sorted"),av.step()}function callCommand(e,t,r,a){switch(r){case"largest":findLargest(e,t,a);break;case"sum":sumArray(e,t,a);break;case"double":doubleVals(e,t,a);break;case"rotate_left":rotateLeft(e,t,a);break;case"is_sorted":checkSorted(e,t,a);break;default:av.umsg("Invalid Command")}av.step(),e.hide()}function createAndCall(e,t,r){var a=document.getElementById(e).innerHTML;let l=document.getElementById(t).innerHTML;var n=[],e=(n=l.split(",").map(Number)).length,t=av.ds.array(n,{indexed:!0});av.umsg("Command #"+r+": "+a),av.step(),callCommand(t,n,a,e)}Module.setStatus("Downloading..."),window.onerror=function(){Module.setStatus("Exception thrown, see JavaScript console"),spinnerElement.style.display="none",Module.setStatus=function(e){e&&Module.printErr("[post-exception status] "+e)}},av=new JSAV("container"),document.querySelector(".restart").addEventListener("click",function(){location.replace("array")}),document.querySelector(".startarray").addEventListener("click",function(){$(this).prop("disabled",!0),av.umsg("We'll run the visualization using your array methods"),av.step(),av.displayInit(),createAndCall("name1","array1vals",1),createAndCall("name2","array2vals",2),createAndCall("name3","array3vals",3),av.umsg("Did all of your array functions work as expected?"),av.recorded()});