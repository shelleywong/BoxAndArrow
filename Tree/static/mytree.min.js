var av,bst,statusElement=document.getElementById("status"),progressElement=document.getElementById("progress"),spinnerElement=document.getElementById("spinner"),Module={preRun:[],postRun:[],print:function(){var t=document.getElementById("output");return t&&(t.value=""),function(e){1<arguments.length&&(e=Array.prototype.slice.call(arguments).join(" ")),console.log(e),t&&(t.value+=e+"\n",t.scrollTop=t.scrollHeight)}}(),printErr:function(e){1<arguments.length&&(e=Array.prototype.slice.call(arguments).join(" ")),console.error(e)},canvas:function(){var e=document.getElementById("canvas");return e.addEventListener("webglcontextlost",function(e){alert("WebGL context lost. You will need to reload the page."),e.preventDefault()},!1),e}(),setStatus:function(e){var t,n;Module.setStatus.last||(Module.setStatus.last={time:Date.now(),text:""}),e!==Module.setStatus.last.text&&(t=e.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/),n=Date.now(),t&&n-Module.setStatus.last.time<30||(Module.setStatus.last.time=n,Module.setStatus.last.text=e,t?(e=t[1],progressElement.value=100*parseInt(t[2]),progressElement.max=100*parseInt(t[4]),progressElement.hidden=!1,spinnerElement.hidden=!1):(progressElement.value=null,progressElement.max=null,progressElement.hidden=!0,e||(spinnerElement.hidden=!0)),statusElement.innerHTML=e))},totalDependencies:0,monitorRunDependencies:function(e){this.totalDependencies=Math.max(this.totalDependencies,e),Module.setStatus(e?"Preparing... ("+(this.totalDependencies-e)+"/"+this.totalDependencies+")":"All downloads complete.")}};function setNode(e,t){av.umsg("Insert "+t),e.value(t),e.left("NULL"),e.right("NULL")}function checkLR(e,t,n,r){e.unhighlight(),0==n[r]?setNode(e,t):1==n[r]?e.left()?(e.left().highlight(),av.step(),checkLR(e.left(),t,n,r+1)):(av.umsg("Your insert() function produced an unexpected result that does not match the model. It may have tried to access memory that it does not have access to."),av.step()):e.right()?(e.right().highlight(),av.step(),checkLR(e.right(),t,n,r+1)):(av.umsg("Your insert() function produced an unexpected result that does not match the model. It may have tried to access memory that it does not have access to."),av.step())}function insertVal(n,r){if(av.umsg("Testing Tree::insert() with next input value: "+r),av.step(),n.insert(r)){let t=n.helper(r);if("0"==t)bst.root().highlight(),av.umsg("Tree is empty: insert at root"),av.step(),setNode(bst.root(),r);else{let e=t.split("");n=e.map(Number);console.log("Result: "+n),bst.root().highlight(),av.umsg("Insert "+r+" at a leaf and maintain binary search tree properties"),av.step(),checkLR(bst.root(),r,n,0)}}else av.umsg(r+" is already in the tree"),av.step()}function highlightFound(e,t){e.unhighlight(),av.umsg(t+" was found"),e.css({"background-color":"rgb(140, 35, 50)",color:"white"}),av.step(),e.css({"background-color":"white",color:"black"})}function findLR(e,t,n,r){e.highlight(),av.step(),0==n[r]?(e.unhighlight(),highlightFound(e,t)):1==n[r]?(e.unhighlight(),e.left()?findLR(e.left(),t,n,r+1):(av.umsg("Your find() function produced an unexpected result that does not match the model. It may have tried to access memory that it does not have access to."),av.step())):(e.unhighlight(),e.right()?findLR(e.right(),t,n,r+1):(av.umsg("Your find() function produced an unexpected result that does not match the model. It may have tried to access memory that it does not have access to."),av.step()))}function findVal(n,r){if(av.umsg("Testing Tree::find() -- lookup element: "+r),av.step(),n.find(r)){let e=n.helper(r),t=e.split("");n=t.map(Number);console.log("Result: "+n),findLR(bst.root(),r,n,0)}else av.umsg(r+" was not found in the tree"),av.step()}function countJSAV(e,t){"NULL"!=e.value()&&(countJSAV(e.left(),t),countJSAV(e.right(),t),t.push(1))}function getSize(e){av.umsg("Testing Tree::size()"),av.step();var t=e.size();0==t?av.umsg("The tree is empty"):(e=[],countJSAV(bst.root(),e),e.length==t?av.umsg("The number of nodes in your tree is "+t):av.umsg("Hmm, something looks wrong. Your size() function returned "+t+", but there are "+e.length+" nodes in the tree")),av.step()}function isBalanced(e){av.umsg("Testing Tree::balanced()"),av.step();e=e.balanced();-1==e?av.umsg("The tree is not balanced"):0==e?av.umsg("The tree is empty, and an empty tree is balanced"):av.umsg("The tree is balanced and has a height of "+e),av.step()}function traverseIO(e){"NULL"!=e.value()&&(traverseIO(e.left()),e.highlight(),av.step(),e.unhighlight(),traverseIO(e.right()))}function printInOrder(e){av.umsg("Testing Tree::print_inorder()"),av.step();e=e.print_inorder();""==e?av.umsg("The Tree is empty"):(av.umsg("Confirm that the results from your C++ Tree in-order traversal match the visualization: "+e),traverseIO(bst.root()))}function traversePre(e){"NULL"!=e.value()&&(e.highlight(),av.step(),e.unhighlight(),traversePre(e.left()),traversePre(e.right()))}function printPreOrder(e){av.umsg("Testing Tree::print_preorder()"),av.step();e=e.print_preorder();""==e?av.umsg("The Tree is empty"):(av.umsg("Confirm that the results from your C++ Tree pre-order traversal match the visualization: "+e),traversePre(bst.root()))}function traversePost(e){"NULL"!=e.value()&&(traversePost(e.left()),traversePost(e.right()),e.highlight(),av.step(),e.unhighlight())}function printPostOrder(e){av.umsg("Testing Tree::print_postorder()"),av.step();e=e.print_postorder();""==e?av.umsg("The Tree is empty"):(av.umsg("Confirm that the results from your C++ Tree post-order traversal match the visualization: "+e),traversePost(bst.root()))}function callCommand(t,n,r,s){for(let e=0;e<s;e++){var a=n[e];if(Number.isInteger(a)){switch(console.log("name: "+r),r){case"insert":insertVal(t,a);break;case"find":findVal(t,a);break;case"size":getSize(t);break;case"balanced":isBalanced(t);break;case"print_inorder":printInOrder(t);break;case"print_preorder":printPreOrder(t);break;case"print_postorder":printPostOrder(t);break;default:av.umsg("Invalid Command")}bst.layout()}else av.umsg("The value "+a+" is invalid")}}function createAndCall(e,t,n,r){var s=document.getElementById(t).innerHTML;let a=document.getElementById(n).innerHTML;t=a.split(",").map(Number),n=t.length;av.umsg("Command #"+r+": "+s),callCommand(e,t,s,n),av.step()}Module.setStatus("Downloading..."),window.onerror=function(){Module.setStatus("Exception thrown, see JavaScript console"),spinnerElement.style.display="none",Module.setStatus=function(e){e&&Module.printErr("[post-exception status] "+e)}},av=new JSAV("container"),document.querySelector(".restart").addEventListener("click",function(){location.replace("tree")}),document.querySelector(".startbst").addEventListener("click",function(){$(this).prop("disabled",!0),(bst=av.ds.binarytree()).root().value("NULL");var e=new Module.Tree;av.umsg("We'll run the visualization using your binary tree methods"),av.step(),av.displayInit(),createAndCall(e,"name1","array1vals",1),createAndCall(e,"name2","array2vals",2),createAndCall(e,"name3","array3vals",3),av.umsg("Did your tree functions work as expected?"),e.delete(),av.recorded()});